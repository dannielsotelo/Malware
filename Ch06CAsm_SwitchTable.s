	.file	"program.c"
	.text
	.globl	msg
	.data
	.align 32
	.type	msg, @object
	.size	msg, 362
msg:
	.ascii	"Switch statements are often implemented using a switch table"
	.ascii	" that consists\nof pointers to code that are i"
	.string	"ndexed by the value of the integer being\ntested.  In this assignment, you you will need to decode the switch table to\nfind out the value that will unlock the level.  The assembly output of the\nprogram is included in a .s file for your viewing convenience\n\n"
	.section	.rodata
.LC0:
	.string	"%s"
	.text
	.globl	print_msg
	.type	print_msg, @function
print_msg:
.LFB5:
	.cfi_startproc
	pushl	%ebp
	.cfi_def_cfa_offset 8
	.cfi_offset 5, -8
	movl	%esp, %ebp
	.cfi_def_cfa_register 5
	pushl	%ebx
	subl	$20, %esp
	.cfi_offset 3, -12
	call	__x86.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	subl	$12, %esp
	leal	msg@GOTOFF(%ebx), %eax
	pushl	%eax
	call	strlen@PLT
	addl	$16, %esp
	movl	%eax, -12(%ebp)
	movl	$0, -24(%ebp)
	jmp	.L2
.L3:
	movl	-24(%ebp), %eax
	movl	$0, %edx
	divl	-12(%ebp)
	movl	%edx, %eax
	movzbl	msg@GOTOFF(%ebx,%eax), %eax
	movsbl	%al, %ecx
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	$0, %edx
	divl	-12(%ebp)
	movl	%edx, %eax
	movzbl	msg@GOTOFF(%ebx,%eax), %eax
	movsbl	%al, %eax
	addl	%ecx, %eax
	addl	%eax, -20(%ebp)
	movl	-24(%ebp), %eax
	addl	$1, %eax
	movl	$0, %edx
	divl	-12(%ebp)
	movl	%edx, %eax
	movzbl	msg@GOTOFF(%ebx,%eax), %eax
	movsbl	%al, %ecx
	movl	-24(%ebp), %eax
	addl	$2, %eax
	movl	$0, %edx
	divl	-12(%ebp)
	movl	%edx, %eax
	movzbl	msg@GOTOFF(%ebx,%eax), %eax
	movsbl	%al, %eax
	addl	%ecx, %eax
	addl	%eax, -16(%ebp)
	addl	$1, -24(%ebp)
.L2:
	movl	-12(%ebp), %eax
	imull	$100, %eax, %eax
	cmpl	%eax, -24(%ebp)
	jb	.L3
	movl	-20(%ebp), %eax
	cmpl	-16(%ebp), %eax
	jne	.L4
	subl	$8, %esp
	leal	msg@GOTOFF(%ebx), %eax
	pushl	%eax
	leal	.LC0@GOTOFF(%ebx), %eax
	pushl	%eax
	call	printf@PLT
	addl	$16, %esp
	jmp	.L6
.L4:
	subl	$8, %esp
	leal	msg@GOTOFF(%ebx), %eax
	pushl	%eax
	leal	.LC0@GOTOFF(%ebx), %eax
	pushl	%eax
	call	printf@PLT
	addl	$16, %esp
.L6:
	nop
	movl	-4(%ebp), %ebx
	leave
	.cfi_restore 5
	.cfi_restore 3
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE5:
	.size	print_msg, .-print_msg
	.section	.rodata
.LC1:
	.string	"Enter the password: "
.LC2:
	.string	"%d"
.LC3:
	.string	"Try again."
.LC4:
	.string	"Good Job."
	.text
	.globl	main
	.type	main, @function
main:
.LFB6:
	.cfi_startproc
	leal	4(%esp), %ecx
	.cfi_def_cfa 1, 0
	andl	$-16, %esp
	pushl	-4(%ecx)
	pushl	%ebp
	.cfi_escape 0x10,0x5,0x2,0x75,0
	movl	%esp, %ebp
	pushl	%ebx
	pushl	%ecx
	.cfi_escape 0xf,0x3,0x75,0x78,0x6
	.cfi_escape 0x10,0x3,0x2,0x75,0x7c
	subl	$16, %esp
	call	__x86.get_pc_thunk.bx
	addl	$_GLOBAL_OFFSET_TABLE_, %ebx
	movl	%gs:20, %eax
	movl	%eax, -12(%ebp)
	xorl	%eax, %eax
	call	print_msg
	subl	$12, %esp
	leal	.LC1@GOTOFF(%ebx), %eax
	pushl	%eax
	call	printf@PLT
	addl	$16, %esp
	subl	$8, %esp
	leal	-16(%ebp), %eax
	pushl	%eax
	leal	.LC2@GOTOFF(%ebx), %eax
	pushl	%eax
	call	__isoc99_scanf@PLT
	addl	$16, %esp
	movl	-16(%ebp), %eax
	subl	$47143, %eax
	cmpl	$4, %eax
	ja	.L8
	sall	$2, %eax
	movl	.L10@GOTOFF(%eax,%ebx), %eax
	addl	%ebx, %eax
	jmp	*%eax
	.section	.rodata
	.align 4
	.align 4
.L10:
	.long	.L9@GOTOFF
	.long	.L11@GOTOFF
	.long	.L12@GOTOFF
	.long	.L11@GOTOFF
	.long	.L9@GOTOFF
	.text
.L9:
	subl	$12, %esp
	leal	.LC3@GOTOFF(%ebx), %eax
	pushl	%eax
	call	puts@PLT
	addl	$16, %esp
	jmp	.L13
.L11:
	subl	$12, %esp
	leal	.LC3@GOTOFF(%ebx), %eax
	pushl	%eax
	call	puts@PLT
	addl	$16, %esp
	jmp	.L13
.L12:
	subl	$12, %esp
	leal	.LC4@GOTOFF(%ebx), %eax
	pushl	%eax
	call	puts@PLT
	addl	$16, %esp
	jmp	.L13
.L8:
	subl	$12, %esp
	leal	.LC3@GOTOFF(%ebx), %eax
	pushl	%eax
	call	puts@PLT
	addl	$16, %esp
.L13:
	movl	$0, %eax
	movl	-12(%ebp), %edx
	xorl	%gs:20, %edx
	je	.L15
	call	__stack_chk_fail_local
.L15:
	leal	-8(%ebp), %esp
	popl	%ecx
	.cfi_restore 1
	.cfi_def_cfa 1, 0
	popl	%ebx
	.cfi_restore 3
	popl	%ebp
	.cfi_restore 5
	leal	-4(%ecx), %esp
	.cfi_def_cfa 4, 4
	ret
	.cfi_endproc
.LFE6:
	.size	main, .-main
	.section	.text.__x86.get_pc_thunk.bx,"axG",@progbits,__x86.get_pc_thunk.bx,comdat
	.globl	__x86.get_pc_thunk.bx
	.hidden	__x86.get_pc_thunk.bx
	.type	__x86.get_pc_thunk.bx, @function
__x86.get_pc_thunk.bx:
.LFB7:
	.cfi_startproc
	movl	(%esp), %ebx
	ret
	.cfi_endproc
.LFE7:
	.hidden	__stack_chk_fail_local
	.ident	"GCC: (Ubuntu 7.3.0-16ubuntu3) 7.3.0"
	.section	.note.GNU-stack,"",@progbits
